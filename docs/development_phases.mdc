---
alwaysApply: true
---

# Development Tasks - Sendio Marketing Platform

## ðŸ“‹ Phase 1: Foundation & Landing Page

### Task 1.1: Landing Page Creation âœ…

**Files skapade/uppdaterade:**

- `app/page.tsx` â€“ Landningssida (Next App Router)
- `components/landing/Hero.tsx` â€“ VÃ¤rdeerbjudande (svenska)
- `components/landing/Features.tsx` â€“ Funktioner
- `components/landing/Pricing.tsx` â€“ Transparent prissÃ¤ttning
- `components/landing/HowItWorks.tsx` â€“ SÃ¥ fungerar det
- `components/site/Navbar.tsx` â€“ Navigering med auth

**Uppfyllt:**

- Hero med budskapet "MarknadsfÃ¶ring utan mÃ¥nadsabonnemang"
- Funktioner: inga abonnemang, direkt kostnad, GDPR, enkelt flÃ¶de
- Priser: SMS (SE, DK, NO, FI, DE) och eâ€‘post (per 1000)
- SÃ¥ fungerar det: 5 steg frÃ¥n registrering till analys
- Skandinavisk minimalism, mobilâ€‘fÃ¶rst, Tailwind + shadcn/ui
- Tydliga CTA: "Skapa fÃ¶retagskonto", "Logga in"

**Design Specifications:**

- Use Tailwind CSS with custom color palette
- Responsive design (mobile, tablet, desktop)
- Smooth scroll navigation between sections
- Professional typography (Inter font family)
- Trust indicators (GDPR compliant, Swedish company)

### Task 1.2: Authentication Integration âœ…

**Filer uppdaterade:**

- `app/layout.tsx` â€“ Navbar + svensk metadata, `lang="sv"`
- `app/signin/page.tsx` â€“ Lokaliserad till svenska, stÃ¶d fÃ¶r `?flow=`

**Skapade:**

- `components/site/Navbar.tsx` â€“ Navigering med authâ€‘Ã¥tgÃ¤rder

**Uppfyllt:**

- Landningssida fÃ¶r ickeâ€‘inloggade
- CTA till befintligt authâ€‘flÃ¶de (registrera/inloggning)
- AnvÃ¤ndarmeny/Logga ut via Navbar (shadcn Dropdown)
- LÃ¤tt Ã¶vergÃ¥ng mellan sidor

### Task 1.3: Database Schema Extension âœ…

**Files modified:**

- `convex/schema.ts` - Extended with Sendio-specific tables

**Tables implemented:**

```typescript
// Company profiles (extends user data)
companies: {
  userId: v.id("users"),
  companyName: v.string(),
  companyLogo: v.optional(v.string()),
  createdAt: v.number(),
}

// Contact lists
contacts: {
  companyId: v.id("companies"),
  firstName: v.optional(v.string()),
  lastName: v.optional(v.string()),
  email: v.optional(v.string()),
  phoneNumber: v.optional(v.string()),
  unsubscribed: v.boolean(),
  createdAt: v.number(),
}

// Campaigns
campaigns: {
  companyId: v.id("companies"),
  name: v.string(),
  type: v.union(v.literal("sms"), v.literal("email"), v.literal("both")),
  status: v.union(v.literal("draft"), v.literal("paid"), v.literal("sent")),
  content: v.object({}), // SMS message or email content
  recipientCount: v.number(),
  totalCost: v.number(),
  createdAt: v.number(),
}

// Additional tables for analytics and GDPR compliance:
// - campaignAnalytics: Track delivery and engagement metrics
// - unsubscribeTokens: GDPR-compliant unsubscribe system
// - gdprLogs: Compliance audit trails
```

**Requirements:**

- Maintain existing auth tables (don't modify)
- Add proper indexes for performance
- Include GDPR compliance fields (unsubscribed status)
- Timestamp all records for audit trails

**Completed:**

- âœ… Extended `convex/schema.ts` with Sendio-specific tables
- âœ… Added `companies` table with user relationship and company details
- âœ… Added `contacts` table with GDPR compliance fields (unsubscribed status)
- âœ… Added `campaigns` table supporting SMS, email, and combined campaigns
- âœ… Added `campaignAnalytics` table for tracking delivery and engagement
- âœ… Added `unsubscribeTokens` table for GDPR-compliant unsubscribe system
- âœ… Added `gdprLogs` table for compliance audit trails
- âœ… Implemented proper indexes for performance optimization
- âœ… All tables include timestamp fields for audit trails
- âœ… Schema validated successfully with Convex development server
- âœ… No TypeScript or linting errors

### Task 1.4: GDPR Legal Pages âœ…

**Created:**

- `app/legal/dpa/page.tsx` â€“ DPA (PersonuppgiftsbitrÃ¤desavtal)
- `app/legal/integritetspolicy/page.tsx` â€“ Integritetspolicy
- `app/legal/cookies/page.tsx` â€“ Cookieâ€‘policy
- `app/legal/sakerhet-gdpr/page.tsx` â€“ SÃ¤kerhet & GDPR
- `components/gdpr/ConsentModal.tsx` â€“ GDPR samtyckesmodal
- Uppdaterade lÃ¤nkar i `components/site/Footer.tsx` till rÃ¤tt juridiska sidor

**Meets requirements:**

- DPA och Integritetspolicy pÃ¥ svenska
- Samtyckesmodal fÃ¶r kontaktimporter
- Footer med tillgÃ¤ngliga juridiska lÃ¤nkar
- Tydlig, professionell styling och sprÃ¥k

## ðŸ“‹ Phase 2: Contact Management

### Task 2.1: Contact Import System âœ…

**Files to create:**

- `src/pages/contacts/Import.tsx` - File upload interface
- `src/components/contacts/FileUploader.tsx` - Drag & drop upload
- `src/components/contacts/ColumnMapper.tsx` - CSV/Excel column mapping
- `src/components/contacts/ValidationResults.tsx` - Import validation display
- `src/lib/fileProcessing.ts` - File parsing and validation logic

**Requirements:**

- Support CSV and Excel file formats
- Drag & drop file upload with progress indicator
- Column mapping interface for firstName, lastName, email, phone
- Real-time validation (email format, phone format)
- Error reporting for invalid contacts
- Requirement: at least email OR phone for each contact
- New import completely replaces existing contacts

**Completed:**

- âœ… Route protection: `/` and `/signin` public; all others require auth via `middleware.ts` ([Next.js server auth docs](https://labs.convex.dev/auth/authz/nextjs))
- âœ… Import page at `app/contacts/import/page.tsx` with steps: Upload â†’ Map â†’ Validate
- âœ… File upload supports CSV and Excel; multiâ€‘sheet selection before parsing
- âœ… Column mapping for `firstName`, `lastName`, `email`, `phone` with live preview and hover highlights
- âœ… Validation: email regex, phone prefixes +46/+45/+47/+358/+49 using `libphonenumber-js`; require email OR phone
- âœ… Error reporting list; shows counts. Duplicates allowed; full replace semantics
- âœ… Convex mutation `contacts.replaceImport` replaces previous contacts for the authenticated user's company and logs GDPR `contact_import`
- âœ… Shadcn styling alignment with existing UI components; no new base primitives required
- âœ… Production build success (no lint/type errors)

**Validation Rules:**

- Email: Valid email format if provided (email OR phone required)
- Phone: Valid international format (+46, +45, +47, +358, +49) if provided (email OR phone required)
- Names: Optional but useful for personalization
- Duplicates: Show count but import anyway (new list replaces old)

### Task 2.2: Contact List Management âœ…

**Created/Updated Files:**

- `app/contacts/page.tsx` â€“ Admin contacts page (auth-protected via middleware)
- `components/contacts/ContactTable.tsx` â€“ Data table with actions
- `components/contacts/ContactForm.tsx` â€“ Add/edit contact form
- `components/contacts/DeleteConfirmation.tsx` â€“ GDPR delete modal
- `components/contacts/ExportContacts.tsx` â€“ Data export CSV
- `convex/contacts.ts` â€“ Added `listPaginated`, `add`, `update`, `remove`, `exportAll`

**Meets requirements:**

- SÃ¶k- och filterbar kontaktlista (aktiv/avregistrerad + fritext)
- LÃ¤gg till kontakt manuellt (validering: minst eâ€‘post eller telefon)
- Redigera befintliga kontakter, uppdatera avregistreringsstatus
- Radering med GDPR-bekrÃ¤ftelse och loggning i `gdprLogs`
- Export av kontakter till CSV (Right to Access)
- Visar valideringsstatus (giltig/ogiltig) per rad
- Paginering med nÃ¤sta/fÃ¶regÃ¥ende och storleksval (10/20/50/100)

**UX Flow:**

- Efter lyckad import i `app/contacts/import/page.tsx` omdirigeras anvÃ¤ndaren automatiskt till `/contacts` fÃ¶r en sÃ¶mlÃ¶s Ã¶vergÃ¥ng.

- Lagt till "Ny kundlista"â€‘knapp pÃ¥ `app/contacts/page.tsx` med AlertDialogâ€‘bekrÃ¤ftelse som leder till `/contacts/import` fÃ¶r att starta nytt ersÃ¤ttningsflÃ¶de.
- Importâ€‘sidan visar en informativ Alert som tydligt fÃ¶rklarar att importen ersÃ¤tter hela listan och att avregistreringar bevaras via suppressionâ€‘listan.

**Build:**

- Production build passerar utan fel (Next 15, TS/ESLint clean)

### Task 2.3: Unsubscribe System âœ…

**Created/Updated Files:**

- `app/u/[token]/page.tsx` â€“ GDPRâ€‘friendly unsubscribe page (SMS, eâ€‘post, bÃ¥da)
- `convex/unsubscribe.ts` â€“ Token generering, validering och avregistrering
- `convex/schema.ts` â€“ Lagt till `unsubscribedSms`, `unsubscribedEmail` + behÃ¥ller `unsubscribed`
- `convex/http.ts` â€“ Publik endpoint `/api/unsubscribe/resolve` (hjÃ¤lp/diagnostik)
- `components/ui/checkbox.tsx` â€“ shadcn Checkbox
- `components/contacts/ContactTable.tsx` â€“ Visar SMS/Eâ€‘post avreg separat
- `components/contacts/ContactForm.tsx` â€“ Redigera SMS/Eâ€‘post avreg
- `components/contacts/ExportContacts.tsx` â€“ Exporterar SMS/Eâ€‘post avreg
- `app/contacts/page.tsx` â€“ Passerar nya fÃ¤lt till tabellen

**Meets requirements:**

- Generate unique tokens for each campaign/contact
- One-click unsubscribe (no login required)
- Update contact unsubscribed status, channelâ€‘specifik (SMS/Eâ€‘post separat)
- Preserve unsubscribe status across imports via permanent suppression list (Doâ€‘Notâ€‘Contact). Import consults suppression by email and phone and preserves optâ€‘outs even if contacts were previously deleted and reâ€‘added later.
- Server-side enforcement: Test SMS cannot be sent to unsubscribed numbers at send time (checked against suppression + contact flags).
- Simple confirmation page with clear choices
- Log unsubscribe events for compliance (`gdprLogs`)

**Notes:**

- Kort lÃ¤nk: anvÃ¤nd `/u/{token}` i SMS och eâ€‘postfoten fÃ¶r att minimera tecken
- `contacts.unsubscribed` bibehÃ¥lls fÃ¶r bakÃ¥tkompatibilitet och sÃ¤tts till `true` om nÃ¥gon kanal avreggas
- Permanent suppression table `suppressions(companyId, email?, phoneNumber?, smsOptOut?, emailOptOut?, createdAt)` ensures optâ€‘outs are never lost on list replace.
- Filtren i listor fortsÃ¤tter att fungera via `unsubscribed`

## ðŸ“‹ Phase 3: SMS Campaign Builder

### Task 3.1: SMS Campaign Interface âœ…

**Files to create:**

- `app/campaigns/sms/page.tsx` - SMS campaign creation (Next.js App Router)
- `components/sms/MessageComposer.tsx` - SMS text input
- `components/sms/PhonePreview.tsx` - Mobile phone mockup
- `components/sms/CharacterCounter.tsx` - Real-time character counting
- `components/sms/SenderIdInput.tsx` - Custom sender ID input
- `components/campaigns/VariableInserter.tsx` - Variable insertion tool

**Requirements:**

- Text area for SMS message composition
- Real-time character counter (adjusts for AVREG link)
- Mobile phone preview showing exact message appearance
- Variable insertion for {first_name} and {last_name}
- Custom sender ID input with validation (11 chars, alphanumeric)
- AVREG link preview (auto-appended, user cannot remove)

**Character Calculation:**

- We follow Twilio's segment rules: GSMâ€‘7 160 chars (concatenated 153), UCSâ€‘2 70 chars (concatenated 67). See [Twilio SMS character limit](https://www.twilio.com/docs/glossary/what-sms-character-limit).
- Actual AVREG autoâ€‘appended: "\\n\\nAvreg https://sendio.se/u/{token}" where `token` is 10 chars by default (see `convex/unsubscribe.ts`). Route: `app/u/[token]/page.tsx`.
- The UI builds the final text including AVREG, detects encoding (GSMâ€‘7 vs UCSâ€‘2), and shows accurate segments, chars, and remaining in current segment.

**Completed:**

- âœ… Installed shadcn/ui `textarea`
- âœ… Implemented components: `MessageComposer`, `CharacterCounter`, `PhonePreview`, `SenderIdInput`, `VariableInserter`
- âœ… Created page `app/campaigns/sms/page.tsx`
- âœ… Twilioâ€‘accurate character counter (GSMâ€‘7/UCSâ€‘2 with 160/153 and 70/67) including AVREG `/u/{token}`
- âœ… iPhoneâ€‘style light mode phone preview (dynamic island, header with Sender ID)
- âœ… Variable insertion for `{first_name}` and `{last_name}`
- âœ… Sender ID validation (1â€“11 alphanumeric)
- âœ… Emoji picker for fast insertion
- âœ… Production build passes with no errors

### Task 3.2: SMS Cost Calculation âœ…

**Files created/updated:**

- `components/campaigns/CostBreakdown.tsx` - Cost display using shadcn Table (SEK)
- `hooks/usePricing.ts` - Real-time pricing calculations (SEK)
- `lib/utils.ts` - Added `SMS_PRICING_SEK`, `detectCountryFromPhone`, `formatSek`
- `components/sms/CharacterCounter.tsx` - Exported `computeSegmentsForMessage`
- `components/sms/MessageComposer.tsx` - Emits `onChangeText` with segment count
- `app/campaigns/sms/page.tsx` - Integrated pricing breakdown with Convex contacts

**Requirements:**

- Detect country from phone number prefix â€“ Implemented via `detectCountryFromPhone`
- Calculate cost per SMS by country â€“ Implemented in `usePricing` with `SMS_PRICING_SEK`
- Real-time cost updates as user types or selects contacts â€“ Hook recomputes on segments/text
- Display total cost and per-SMS breakdown â€“ `CostBreakdown` table
- Handle multiple countries in contact list â€“ Aggregated breakdown
- Show cost in Swedish Krona (SEK) â€“ Formatted via `formatSek` and SEK prices

**Pricing Structure (SEK internal mapping):**

- Sweden (+46): 1.25 SEK per SMS
- Denmark (+45): 1.15 SEK per SMS
- Norway (+47): 1.35 SEK per SMS
- Finland (+358): 1.75 SEK per SMS
- Germany (+49): 2.25 SEK per SMS

**Build:**

- âœ… `npm run build` passes with no TypeScript or lint errors

### Task 3.3: SMS Testing âœ…

**Files to create:**

- `src/components/sms/TestSender.tsx` - Test SMS functionality
- `src/lib/twilio.ts` - Twilio SMS integration
- `convex/sms.ts` - SMS operations and logging

**Requirements:**

- Send test SMS to user's own number
- Limit: Up to 5 tests per campaign (tracked per campaign)
- Include AVREG link in test SMS
- Variable replacement in test message
- Emoji support with UCSâ€‘2 detection; fallback to numeric sender when emojis present
- Success/failure feedback
- Log test sends for analytics

Status: Implemented `TestSender` UI, Convex `smsAction.sendTest` with 5-test enforcement, AVREG link inclusion, variable handling, emoji support (UCSâ€‘2 detection), phone normalization to E.164, analytics logging, validation, and server-side suppression checks (blocks unsubscribed recipients). Build passes.

#### Environment & APIs for SMS

- Required env (add to `.env.local` and hosting env):
  - `TWILIO_ACCOUNT_SID`
  - `TWILIO_AUTH_TOKEN`
  - `TWILIO_PHONE_NUMBER`
  - `TWILIO_MESSAGING_SERVICE_SID` (optional)

#### Notes on Encoding & Sender ID

- Messages with emojis/nonâ€‘GSM characters switch to UCSâ€‘2 (70/67 char segments) per Twilio guidance.
- When UCSâ€‘2 is detected, we send from the numeric Twilio number rather than alphanumeric sender for better deliverability.
- We normalize Swedish local numbers (e.g., `073â€¦`) to E.164 (`+46â€¦`).
- Webhooks to implement later (Phase 7):
  - `POST /api/webhooks/twilio` in `convex/http.ts` for delivery status
  - Store events in `campaignAnalytics`

## ðŸ“‹ Phase 4: Email Campaign Builder

### Task 4.1: Email Template System âœ…

**Files created:**

- `app/campaigns/email/page.tsx` - Email campaign creation page (Next.js App Router)
- `components/email/TemplateSelector.tsx` - Pre-made templates with preview functionality
- `components/email/EmailBuilder.tsx` - Drag & drop email builder with real-time editing
- `components/email/ElementLibrary.tsx` - Available email elements and quick layouts
- `data/emailTemplates.ts` - Professional email template definitions with TypeScript

**Completed features:**

- 4 professional email templates (Newsletter, Promotional, Announcement, Event invitation)
- Interactive template selector with thumbnails and modal previews
- Drag & drop email builder with real-time preview
- Element library with text, images, buttons, dividers, and social media components
- Mobile and desktop email preview modes
- Element editing with styling controls (alignment, colors, text content)
- GDPR-compliant email structure with automatic unsubscribe footer
- Variable support for {first_name} and {last_name} personalization
- Responsive email templates designed for professional Swedish business use

**Templates implemented:**

1. **Modern Newsletter** - Clean design for regular communication with header, content blocks, and CTA
2. **Campaign Promotion** - Sales-focused template with discount banners, product showcase, and urgency elements  
3. **Simple Announcement** - Minimalist template for important updates and company news
4. **Event Invitation** - Professional event template with date, location, agenda, and RSVP functionality

**Technical implementation:**

- TypeScript interfaces for EmailElement and EmailTemplate with proper typing
- Comprehensive element type system (text, image, button, divider, social)
- Real-time preview with mobile/desktop responsive design switching
- Element manipulation (add, edit, delete, reorder) with intuitive UI controls
- Color picker and alignment controls for visual customization
- Professional Swedish business language and GDPR compliance built-in
- Next.js 15 App Router structure with shadcn/ui components

**Build status:** âœ… All components compile successfully with no TypeScript or ESLint errors

### Task 4.2: Email Builder Elements

**Files to create:**

- `src/components/email/elements/TextElement.tsx` - Text with styling
- `src/components/email/elements/ImageElement.tsx` - Image upload/display
- `src/components/email/elements/ButtonElement.tsx` - CTA buttons
- `src/components/email/elements/DividerElement.tsx` - Visual dividers
- `src/components/email/elements/SocialElement.tsx` - Social media links
- `src/components/email/StylePanel.tsx` - Element styling controls

**Requirements:**

- Drag & drop interface for element arrangement
- Text elements with font, size, color controls
- Image upload with Convex file storage
- Button elements with customizable styling and URLs
- Trackable links for analytics
- Social media icons and links

### Task 4.3: Email Preview and Variables

**Files to create:**

- `src/components/email/EmailPreview.tsx` - Desktop email preview
- `src/components/email/SubjectLineEditor.tsx` - Subject with variables
- `src/components/email/VariablePreview.tsx` - Variable replacement preview

**Requirements:**

- Desktop email preview modal
- Subject line editor with variable support
- Variable replacement preview using sample contact
- Mobile email preview
- Send test email functionality
- HTML email generation

## ðŸ“‹ Phase 5: Payment Integration

### Task 5.1: Stripe Payment Setup

**Files to create:**

- `src/lib/stripe.ts` - Stripe client configuration
- `src/components/payment/PaymentForm.tsx` - Stripe Elements form
- `src/pages/campaigns/Payment.tsx` - Payment page
- `src/api/payment.ts` - Payment intent creation
- `convex/payments.ts` - Payment operations

**Requirements:**

- Stripe Elements integration
- Swedish Krona (SEK) currency
- Payment intent creation with campaign metadata
- Payment success/failure handling
- Webhook processing for payment confirmation
- Automatic campaign sending after payment

#### Environment & APIs for Stripe

- Required env:
  - `STRIPE_SECRET_KEY`
  - `STRIPE_WEBHOOK_SECRET`
- API endpoints:
  - `POST /api/webhooks/stripe` in `convex/http.ts` (signature verified)
  - Client-side Stripe Elements using `src/lib/stripe.ts`

### Task 5.2: Campaign Cost Summary

**Files to create:**

- `src/components/campaigns/CampaignSummary.tsx` - Final campaign overview
- `src/components/campaigns/PaymentBreakdown.tsx` - Detailed cost breakdown

**Requirements:**

- Complete campaign summary before payment
- Cost breakdown by SMS countries and email count
- Campaign content preview
- Recipient count and targeting
- Payment button with final cost
- Terms and conditions acceptance

## ðŸ“‹ Phase 6: Campaign Sending

### Task 6.1: Campaign Processing

**Files to create:**

- `src/lib/campaignProcessor.ts` - Campaign execution logic
- `src/lib/mailgun.ts` - Mailgun email integration
- `convex/campaigns.ts` - Campaign operations
- `src/components/campaigns/SendingProgress.tsx` - Progress tracking

**Requirements:**

- Process campaigns after successful payment
- Batch sending for large contact lists
- Rate limiting for API calls
- Error handling and retry logic
- Progress tracking and user feedback
- Automatic AVREG link insertion for SMS
- Automatic unsubscribe footer for emails

#### Environment & APIs for Email

- Required env (Mailgun):
  - `MAILGUN_API_KEY`
  - `MAILGUN_DOMAIN`
  - `MAILGUN_BASE_URL=api.eu.mailgun.net`
- API endpoints:
  - `POST /api/webhooks/mailgun` in `convex/http.ts` for events

### Task 6.2: Campaign Scheduling

**Files to create:**

- `src/components/campaigns/Scheduler.tsx` - Scheduling interface
- `src/lib/scheduler.ts` - Scheduling logic
- `convex/cron.ts` - Scheduled campaign processing

**Requirements:**

- Schedule campaigns up to 30 days ahead
- User timezone handling
- Hourly scheduling granularity
- Schedule modification and cancellation
- Automated sending at scheduled time
- Cron job processing with Convex

## ðŸ“‹ Phase 7: Analytics Dashboard

### Task 7.1: Webhook Processing

**Files to create:**

- `src/api/webhooks/twilio.ts` - Twilio webhook handler
- `src/api/webhooks/mailgun.ts` - Mailgun webhook handler
- `convex/analytics.ts` - Analytics data processing
- `src/lib/webhookProcessing.ts` - Webhook validation and processing

**Requirements:**

- Process Twilio SMS delivery webhooks
- Process Mailgun email tracking webhooks
- Webhook signature verification
- Real-time analytics updates
- Event logging and storage

### Task 7.2: Analytics Dashboard

**Files to create:**

- `src/pages/analytics/Dashboard.tsx` - Main analytics view
- `src/components/analytics/CampaignStats.tsx` - Campaign statistics
- `src/components/analytics/Charts.tsx` - Data visualization
- `src/components/analytics/ExportData.tsx` - Data export functionality

**Requirements:**

- Real-time campaign statistics
- SMS metrics: sent, delivered, failed
- Email metrics: sent, delivered, opened, clicked
- Charts and graphs for data visualization
- Historical data views
- Export analytics data

## ðŸ“‹ Phase 8: Final Polish

### Task 8.1: Error Handling and UX

**Files to create:**

- `src/components/ui/LoadingStates.tsx` - Loading components
- `src/components/ui/ErrorBoundary.tsx` - Error handling
- `src/components/ui/ToastNotifications.tsx` - User feedback
- `src/lib/errorHandling.ts` - Error processing

**Requirements:**

- Consistent loading states throughout app
- Error boundaries for component failures
- Toast notifications for user actions
- Graceful error handling and recovery
- User-friendly error messages

### Task 8.2: Mobile Optimization

**Files to modify:** All components for mobile responsiveness

**Requirements:**

- Mobile-first responsive design
- Touch-friendly interfaces
- Optimized mobile navigation
- Mobile campaign creation workflow
- Mobile analytics viewing

### Task 8.3: Performance Optimization

**Requirements:**

- Code splitting and lazy loading
- Image optimization
- Bundle size optimization
- Loading performance improvements
- Real-time updates optimization

This task structure provides clear, actionable development steps that build upon the existing Convex Auth starter kit while implementing all the Sendio-specific features discussed in your requirements.